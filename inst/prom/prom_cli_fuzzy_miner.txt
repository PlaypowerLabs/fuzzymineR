System.out.println("Loading log");
log = open_xes_log_file("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/log.xes");

System.out.println("Mining model");
Metrics_Repository = mine_fuzzy_model(log);
System.out.println("Model mined Successfully");

System.out.println("Creating Mutable Fuzzy Graph Object");
org.processmining.models.graphbased.directed.fuzzymodel.MutableFuzzyGraph MFG = new org.processmining.models.graphbased.directed.fuzzymodel.MutableFuzzyGraph(Metrics_Repository);
System.out.println("Object created successfully");

//Mapping of index to names  ------>

System.out.println("Writing names of nodes to a file");
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/names.csv");
n = Metrics_Repository.getNumberOfLogEvents();
for(i=0;i<n;i++)
{
node = MFG.getPrimitiveNode(i);
writer.write(node.getElementName());
writer.write("\r\n");
}
writer.close();

System.out.println("Write Successfull");


// Uniary Metrics Write ----->

List_UM = Metrics_Repository.getUnaryMetrics();

System.out.println("Writing UM1");
Obj_UM = List_UM.get(0);
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/UM_Out1.csv");
writer.write("freq_sig_unary_log");
writer.write("\r\n");
n = Obj_UM.size();
for(i=0;i<n;i++)
{
s = Double.toString(Obj_UM.getMeasure(i));
writer.write(s);
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


	System.out.println("Writing UM2");
Obj_UM = List_UM.get(1);
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/UM_Out2.csv");
writer.write("routing_sig_unary_der");
writer.write("\r\n");
n = Obj_UM.size();
for(i=0;i<n;i++)
{
s = Double.toString(Obj_UM.getMeasure(i));
writer.write(s);
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


// Binary Metrics Write -------->

List_BLM = Metrics_Repository.getBinaryLogMetrics();

System.out.println("Writing BM1");
Obj_BLM = List_BLM.get(0);
n = Obj_BLM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out1.csv");
writer.write("freq_sig_binary_log");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BLM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


System.out.println("Writing BM2");
Obj_BLM = List_BLM.get(1);
n = Obj_BLM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out2.csv");
writer.write("prox_corr_binary_log");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BLM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");



System.out.println("Writing BM3");
Obj_BLM = List_BLM.get(2);
n = Obj_BLM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out3.csv");
writer.write("end_point_corr_binary_log");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BLM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


System.out.println("Writing BM4");
Obj_BLM = List_BLM.get(3);
n = Obj_BLM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out4.csv");
writer.write("org_corr_binary_log");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BLM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


System.out.println("Writing BM5");
Obj_BLM = List_BLM.get(4);
n = Obj_BLM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out5.csv");
writer.write("data_type_corr_binary_log");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BLM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


System.out.println("Writing BM6");
Obj_BLM = List_BLM.get(5);
n = Obj_BLM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out6.csv");
writer.write("data_value_corr_binary_log");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BLM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");


System.out.println("Writing BM7");
List_BDM = Metrics_Repository.getBinaryDerivateMetrics();
Obj_BDM = List_BDM.get(0);
n = Obj_BDM.size();
FileWriter writer = new FileWriter("C:/Users/Tirth Shah/AppData/Local/Temp/RtmpofN9hV/BM_Out7.csv");
writer.write("distance_sig_binary_der");
writer.write("\r\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
s = Double.toString(Obj_BDM.getMeasure(i,j));
writer.write(s);
if(j<n-1)
writer.write(",");
}
writer.write("\r\n");
}
writer.close();
System.out.println("Write Successfull");

exit();
